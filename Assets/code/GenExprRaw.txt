eq3bandas(sigL, sigR, lf, pf, hf, lg, pg, hg, bw) {
	x_1, sigR = lowshelf(sigL, sigR, lf, lg);
	x_2, sigR = peak(x_1, sigR, pf, pg, bw);
	x_3, sigR = hishelf(x_2, sigR, hf, hg);
	return x_3, sigR;
}

hishelf(sigL, sigR, freq, db) {
	History b0(0);
	History f(0);
	History b1(0);
	History w(0);
	History a0(0);
	History a1(0);
	if(((change(freq)) != 0) || ((change(db)) != 0)) {
		b0 = pow(1.059253692627, db * 0.25);
		f = min(freq * b0, samplerate);
		b1 = (b0 * b0) - 1;
		w = tan((((max(f, 0)) * pi)) / samplerate);
		a0 = 1 / ((w + 1));
		a1 = w - 1;
	}
	outputHighShelfL = hishelfCore(sigL, a0, a1, b1);
	outputHighShelfR = hishelfCore(sigR, a0, a1, b1);
	return outputHighShelfL, outputHighShelfR;
}

lowshelf(sigL, sigR, freq, db) {
	History b0(0);
	History f(0);
	History b1(0);
	History w(0);
	History a0(0);
	History a1(0);
	if(((change(freq)) != 0) || ((change(db)) != 0)) {
		b0 = pow(1.059253692627, db * 0.5);
		f = freq / b0;
		b1 = (b0 * b0) - 1;
		w = tan(((f * pi)) / samplerate);
		a0 = 1 / ((w + 1));
		a1 = w - 1;
	}
	outputLowShelfL = lowshelfCore(sigL, a0, a1, b1, w);
	outputLowShelfR = lowshelfCore(sigR, a0, a1, b1, w);
	return outputLowShelfL, outputLowShelfR;
}

peakCore(input, w, d2, a0, a1, a2) {
	History z1(0);
	History z2(0);
	History z3(0);
	History z4(0);
	output = ((input - z2)) * w;
	z2 = z1;
	z1 = input;
	output_4 = a0 * ((((output - (a1 * z3))) - (a2 * z4)));
	z4 = z3;
	z3 = output_4;
	output_5 = input + (output_4 * d2);
	return output_5;
}

lowshelfCore(input, a0, a1, b1, w) {
	History z1(0);
	x = a0 * ((input - (a1 * z1)));
	output = w * ((x + z1));
	z1 = x;
	return (output * b1) + input;
}

peak(sigL, sigR, freq, db, bw) {
	History w(0);
	History b0(0);
	History d0(0);
	History d(0);
	History d2(0);
	History wq(0);
	History w2(0);
	History a0(0);
	History a1(0);
	History a2(0);
	if(((((change(freq)) != 0) || ((change(db)) != 0))) || ((change(bw)) != 0)) {
		w = tan(((freq * pi)) / samplerate);
		b0 = pow(1.059253692627, db * 0.5);
		b = (b0 * b0) - 1;
		d0 = pow(1.4142135381699, bw);
		d = clip((((d0 * d0) - 1)) / ((d0 * b0)), 0.01, 100);
		d2 = d * b;
		wq = d * w;
		w2 = w * w;
		a0 = 1 / ((((1 + w2)) + wq));
		a1 = ((w2 - 1)) * 2;
		a2 = ((1 + w2)) - wq;
	}
	outputPeakL = peakCore(sigL, w, d2, a0, a1, a2);
	outputPeakR = peakCore(sigR, w, d2, a0, a1, a2);
	return outputPeakL, outputPeakR;
}

hishelfCore(input, a0, a1, b1) {
	History z1(0);
	x = a0 * ((input - (a1 * z1)));
	output = x - z1;
	z1 = x;
	output_6 = (output * b1) + input;
	return output_6;
}

History history_7(0);
Param e_size(0, max=2, default=1, min=0.5);
Param q_onoffEQ(0, min=0, default=0, max=1);
Param u_atk(0, min=5, default=10, max=250);
Param i_peakGain(0, min=-30, default=0, max=30);
Param r_onoffCOMP(0, min=0, default=0, max=1);
Param k_lpf(0, min=100, default=20000, max=20000);
Param t_ratio(0, min=1, default=2, max=20);
Param n_lowFreq(0, min=20, default=500, max=800);
Param g_freeze(0, min=0, default=0, max=1);
Param d_damp(0, min=0.001, default=0.8, max=1);
Param f_st(0, min=0, default=0.5, max=0.8);
Param c_reflect(0, min=0.1, default=0.86, max=0.98);
Param a_input(0, min=0, default=1, max=1.);
Param b_drywet(0, min=0, default=0.33, max=1.);
Param j_hiGain(0, min=-30, default=0, max=30);
Param o_peakFreq(0, min=100, default=800, max=2500);
Param p_hiFreq(0, min=800, default=2000, max=15000);
Param w_makeup(0, min=-6, default=0, max=6);
Param l_hpf(0, min=20, default=20, max=5000);
Param v_rel(0, min=5, default=100, max=500);
Param m_output(0, min=0, default=1, max=1.);
Param s_thd(0, min=-36, default=-12, max=0);
Param h_lowGain(0, min=-30, default=0, max=30);
History history_8(0);
History history_9(0);
History history_10(0);
History history_11(0);
History history_12(0);
History history_13(0);
History history_14(0);
History history_15(0);
History history_16(0);
History history_17(0);
History history_18(0);
History history_19(0);
History history_20(0);
History history_21(0);
History history_22(0);
History history_23(0);
History history_24(0);
History history_25(0);
History history_26(0);
History history_27(0);
History history_28(0);
History history_29(0);
History history_30(0);
History history_31(0);
History history_32(0);
History history_33(0);
History history_34(0);
History history_35(0);
History history_36(0);
History history_37(0);
History history_38(0);
History history_39(0);
History history_40(0);
History history_41(0);
History history_42(0);
History history_43(0);
History history_44(0);
History history_45(0);
History history_46(0);
History history_47(0);
History history_48(0);
History history_49(0);
History history_50(0);
History history_51(0);
History history_52(0);
History history_53(0);
History history_54(0);
History history_55(0);
History history_56(0);
Delay delay_57(samplerate);
History history_58(0);
Delay delay_59(samplerate);
History history_60(0);
Delay delay_61(samplerate);
History history_62(0);
Delay delay_63(samplerate);
History history_64(0);
Delay delay_65(samplerate);
History history_66(0);
Delay delay_67(samplerate);
History history_68(0);
Delay delay_69(samplerate);
History history_70(0);
Delay delay_71(samplerate);
History history_72(0);
Delay delay_73(samplerate);
Delay delay_74(samplerate);
Delay delay_75(samplerate);
Delay delay_76(samplerate);
Delay delay_77(samplerate);
Delay delay_78(samplerate);
Delay delay_79(samplerate);
Delay delay_80(samplerate);
History history_81(0);
History history_82(0);
History history_83(0);
History history_84(0);
History history_85(0);
History history_86(0);
History history_87(0);
History history_88(0);
Delay delay_89(samplerate);
History history_90(0);
Delay delay_91(samplerate);
History history_92(0);
Delay delay_93(samplerate);
History history_94(0);
Delay delay_95(samplerate);
History history_96(0);
Delay delay_97(samplerate);
History history_98(0);
Delay delay_99(samplerate);
History history_100(0);
Delay delay_101(samplerate);
History history_102(0);
Delay delay_103(samplerate);
History history_104(0);
Delay delay_105(samplerate);
Delay delay_106(samplerate);
Delay delay_107(samplerate);
Delay delay_108(samplerate);
Delay delay_109(samplerate);
Delay delay_110(samplerate);
Delay delay_111(samplerate);
Delay delay_112(samplerate);
Delay delay_113(44100);
History history_114(0);
History history_115(0);
Delay delay_116(44100);
History history_117(0);
History history_118(0);
mul_119 = history_7 * 0.999;
mul_120 = m_output * 0.001;
add_121 = mul_120 + mul_119;
gen_122 = add_121;
history_7_next_123 = fixdenorm(add_121);
mul_124 = history_8 * 0.999;
mul_125 = r_onoffCOMP * 0.001;
add_126 = mul_125 + mul_124;
gen_127 = add_126;
history_8_next_128 = fixdenorm(add_126);
onC_129 = gen_127;
mul_130 = history_9 * 0.999;
mul_131 = s_thd * 0.001;
add_132 = mul_131 + mul_130;
gen_133 = add_132;
history_9_next_134 = fixdenorm(add_132);
thdC_135 = gen_133;
mul_136 = history_10 * 0.999;
mul_137 = t_ratio * 0.001;
add_138 = mul_137 + mul_136;
gen_139 = add_138;
history_10_next_140 = fixdenorm(add_138);
ratioC_141 = gen_139;
mul_142 = history_11 * 0.999;
mul_143 = u_atk * 0.001;
add_144 = mul_143 + mul_142;
gen_145 = add_144;
history_11_next_146 = fixdenorm(add_144);
atkC_147 = gen_145;
mul_148 = history_12 * 0.999;
mul_149 = v_rel * 0.001;
add_150 = mul_149 + mul_148;
gen_151 = add_150;
history_12_next_152 = fixdenorm(add_150);
relC_153 = gen_151;
mul_154 = history_13 * 0.999;
mul_155 = w_makeup * 0.001;
add_156 = mul_155 + mul_154;
gen_157 = add_156;
history_13_next_158 = fixdenorm(add_156);
mkC_159 = gen_157;
mul_160 = history_14 * 0.999;
mul_161 = b_drywet * 0.001;
add_162 = mul_161 + mul_160;
gen_163 = add_162;
history_14_next_164 = fixdenorm(add_162);
dry_wet_165 = gen_163;
mul_166 = history_15 * 0.999;
mul_167 = dry_wet_165 * 0.001;
add_168 = mul_167 + mul_166;
gen_169 = add_168;
history_15_next_170 = fixdenorm(add_168);
int_171 = int(0);
zero_172 = int_171;
zero_173 = zero_172;
zero_174 = zero_172;
mul_175 = history_16 * 0.999;
mul_176 = q_onoffEQ * 0.001;
add_177 = mul_176 + mul_175;
gen_178 = add_177;
history_16_next_179 = fixdenorm(add_177);
onOffEQ_180 = gen_178;
eq_181 = g_freeze == 1;
toSize_182 = eq_181;
toSize_183 = toSize_182;
mul_184 = history_17 * 0.999;
mul_185 = toSize_183 * 0.001;
add_186 = mul_185 + mul_184;
gen_187 = add_186;
history_17_next_188 = fixdenorm(add_186);
mul_189 = history_18 * 0.999;
mul_190 = f_st * 0.001;
add_191 = mul_190 + mul_189;
gen_192 = add_191;
history_18_next_193 = fixdenorm(add_191);
scale_194 = scale(gen_192, 0, 0.8, 0.707, 1., 1);
mul_195 = history_19 * 0.999;
mul_196 = n_lowFreq * 0.001;
add_197 = mul_196 + mul_195;
gen_198 = add_197;
history_19_next_199 = fixdenorm(add_197);
mul_200 = history_20 * 0.999;
mul_201 = o_peakFreq * 0.001;
add_202 = mul_201 + mul_200;
gen_203 = add_202;
history_20_next_204 = fixdenorm(add_202);
mul_205 = history_21 * 0.999;
mul_206 = p_hiFreq * 0.001;
add_207 = mul_206 + mul_205;
gen_208 = add_207;
history_21_next_209 = fixdenorm(add_207);
mul_210 = history_22 * 0.999;
mul_211 = h_lowGain * 0.001;
add_212 = mul_211 + mul_210;
gen_213 = add_212;
history_22_next_214 = fixdenorm(add_212);
mul_215 = history_23 * 0.999;
mul_216 = i_peakGain * 0.001;
add_217 = mul_216 + mul_215;
gen_218 = add_217;
history_23_next_219 = fixdenorm(add_217);
mul_220 = history_24 * 0.999;
mul_221 = j_hiGain * 0.001;
add_222 = mul_221 + mul_220;
gen_223 = add_222;
history_24_next_224 = fixdenorm(add_222);
mul_225 = history_25 * 0.999;
mul_226 = a_input * 0.001;
add_227 = mul_226 + mul_225;
gen_228 = add_227;
history_25_next_229 = fixdenorm(add_227);
input_230 = gen_228;
mul_231 = in1 * input_230;
left_232 = mul_231;
left_233 = left_232;
mix_234 = mix(left_233, zero_173, gen_187);
left_235 = left_232;
mul_236 = in2 * input_230;
right_237 = mul_236;
right_238 = right_237;
right_239 = right_237;
eq_240 = right_239 == 0;
mul_241 = history_26 * 0.999;
mul_242 = eq_240 * 0.001;
add_243 = mul_242 + mul_241;
gen_244 = add_243;
history_26_next_245 = fixdenorm(add_243);
mix_246 = mix(zero_174, left_235, gen_244);
mix_247 = mix(mix_246 + right_238, zero_172, gen_187);
sqrt_248 = sqrt(gen_192);
rsub_249 = 1 - gen_192;
sqrt_250 = sqrt(rsub_249);
int_251 = int(0);
float_252 = float(0.5);
int_253 = int(0);
float_254 = float(0.5);
rsub_255 = 1 - d_damp;
damp_256 = rsub_255;
damp_257 = damp_256;
mul_258 = history_27 * 0.999;
mul_259 = e_size * 0.001;
add_260 = mul_259 + mul_258;
gen_261 = add_260;
history_27_next_262 = fixdenorm(add_260);
escala_Size_263 = gen_261;
escala_Size_264 = escala_Size_263;
escala_Size_265 = escala_Size_263;
escala_Size_266 = escala_Size_263;
mul_267 = history_28 * 0.999;
mul_268 = k_lpf * 0.001;
add_269 = mul_268 + mul_267;
gen_270 = add_269;
history_28_next_271 = fixdenorm(add_269);
mul_272 = history_29 * 0.999;
mul_273 = l_hpf * 0.001;
add_274 = mul_273 + mul_272;
gen_275 = add_274;
history_29_next_276 = fixdenorm(add_274);
float_277 = float(1.);
zero_278 = zero_172;
int_279 = int(0);
zero_280 = zero_172;
zero_281 = zero_172;
toMoud_282 = gen_192;
rsub_283 = 1 - c_reflect;
gate_284 = gate(toSize_182, rsub_283, choices=1);
add_285 = c_reflect + gate_284;
mul_286 = history_30 * 0.999;
mul_287 = add_285 * 0.001;
add_288 = mul_287 + mul_286;
gen_289 = add_288;
history_30_next_290 = fixdenorm(add_288);
int_291 = int(23);
escala_Size_292 = escala_Size_263;
mul_293 = int_291 * escala_Size_292;
left_294 = left_232;
right_295 = right_237;
eq_296 = left_232 == right_295;
mul_297 = history_31 * 0.999;
mul_298 = eq_296 * 0.001;
add_299 = mul_298 + mul_297;
gen_300 = add_299;
history_31_next_301 = fixdenorm(add_299);
mix_302 = mix(zero_281, toMoud_282, gen_300 + gen_244);
mix_303 = mix(zero_278, int_279, mix_302);
zeroL_304 = mix_303;
mix_305 = mix(zero_280, mul_293, mix_302);
zeroR_306 = mix_305;
rsub_307 = 1 - eq_181;
mul_308 = history_32 * 0.999;
mul_309 = rsub_307 * 0.001;
add_310 = mul_309 + mul_308;
gen_311 = add_310;
history_32_next_312 = fixdenorm(add_310);
freeze_313 = gen_311;
mul_314 = ((mix_246 + right_237)) * freeze_313;
toFILTERS_c45R_315 = mul_314;
freeze_316 = freeze_313;
mul_317 = left_294 * freeze_316;
toFILTERS_c45L_318 = mul_317;
omega = ((gen_270 * twopi)) / samplerate;
sn = sin(omega);
cs = cos(omega);
one_over_Q = 1 / float_277;
alpha = ((sn * 0.5)) * one_over_Q;
b0 = 1 / ((1 + alpha));
a2 = ((((1 - cs)) * 0.5)) * b0;
a1 = ((1 - cs)) * b0;
b1 = ((-2 * cs)) * b0;
b2 = ((1 - alpha)) * b0;
expr_319 = a2;
expr_320 = a1;
expr_321 = a2;
expr_322 = b1;
expr_323 = b2;
omega_324 = ((gen_275 * twopi)) / samplerate;
sn_325 = sin(omega_324);
cs_326 = cos(omega_324);
alpha_327 = ((sn_325 * 0.5)) / float_277;
b_328 = 1 / ((1 + alpha_327));
a_329 = ((((1 + cs_326)) * 0.5)) * b_328;
a_330 = (-(1 + cs_326)) * b_328;
b_331 = ((-2 * cs_326)) * b_328;
b_332 = ((1 - alpha_327)) * b_328;
expr_333 = a_329;
expr_334 = a_330;
expr_335 = a_329;
expr_336 = b_331;
expr_337 = b_332;
mul_338 = history_33 * expr_321;
mul_339 = history_34 * expr_321;
mul_340 = history_38 * expr_320;
mul_341 = history_37 * expr_320;
mul_342 = toFILTERS_c45R_315 * expr_319;
mul_343 = toFILTERS_c45L_318 * expr_319;
mul_344 = history_35 * expr_323;
mul_345 = history_36 * expr_323;
mul_346 = history_39 * expr_322;
sub_347 = ((((mul_342 + mul_340)) + mul_338)) - ((mul_346 + mul_344));
gen_348 = sub_347;
mul_349 = history_40 * expr_322;
sub_350 = ((((mul_339 + mul_341)) + mul_343)) - ((mul_349 + mul_345));
gen_351 = sub_350;
history_33_next_352 = fixdenorm(history_38);
history_34_next_353 = fixdenorm(history_37);
history_35_next_354 = fixdenorm(history_39);
history_36_next_355 = fixdenorm(history_40);
history_37_next_356 = fixdenorm(toFILTERS_c45L_318);
history_38_next_357 = fixdenorm(toFILTERS_c45R_315);
history_39_next_358 = fixdenorm(sub_347);
history_40_next_359 = fixdenorm(sub_350);
mul_360 = history_44 * expr_335;
mul_361 = history_42 * expr_335;
mul_362 = history_45 * expr_334;
mul_363 = history_46 * expr_334;
mul_364 = gen_348 * expr_333;
mul_365 = gen_351 * expr_333;
mul_366 = history_41 * expr_337;
mul_367 = history_43 * expr_337;
mul_368 = history_47 * expr_336;
sub_369 = ((((mul_364 + mul_362)) + mul_360)) - ((mul_368 + mul_366));
gen_370 = sub_369;
mul_371 = history_48 * expr_336;
sub_372 = ((((mul_361 + mul_363)) + mul_365)) - ((mul_371 + mul_367));
gen_373 = sub_372;
history_41_next_374 = fixdenorm(history_47);
history_42_next_375 = fixdenorm(history_46);
history_43_next_376 = fixdenorm(history_48);
history_44_next_377 = fixdenorm(history_45);
history_45_next_378 = fixdenorm(gen_348);
history_46_next_379 = fixdenorm(gen_351);
history_47_next_380 = fixdenorm(sub_369);
history_48_next_381 = fixdenorm(sub_372);
gen_382 = gen_370;
gen_383 = gen_373;
fromFILTERS_c45L_384 = gen_383;
rsub_385 = 1 - damp_256;
int_386 = int(1491);
int_387 = int(1617);
int_388 = int(1188);
int_389 = int(1116);
int_390 = int(1557);
int_391 = int(1356);
int_392 = int(1422);
int_393 = int(1277);
div_394 = SAMPLERATE / 44100;
mul_395 = div_394 * escala_Size_266;
mul_396 = int_386 * mul_395;
mul_397 = history_49 * 0.999;
mul_398 = mul_396 * 0.001;
add_399 = mul_398 + mul_397;
gen_400 = add_399;
history_49_next_401 = fixdenorm(add_399);
gen_402 = gen_400;
mul_403 = int_387 * mul_395;
mul_404 = history_50 * 0.999;
mul_405 = mul_403 * 0.001;
add_406 = mul_405 + mul_404;
gen_407 = add_406;
history_50_next_408 = fixdenorm(add_406);
gen_409 = gen_407;
mul_410 = int_388 * mul_395;
mul_411 = history_51 * 0.999;
mul_412 = mul_410 * 0.001;
add_413 = mul_412 + mul_411;
gen_414 = add_413;
history_51_next_415 = fixdenorm(add_413);
gen_416 = gen_414;
mul_417 = int_389 * mul_395;
mul_418 = history_52 * 0.999;
mul_419 = mul_417 * 0.001;
add_420 = mul_419 + mul_418;
gen_421 = add_420;
history_52_next_422 = fixdenorm(add_420);
gen_423 = gen_421;
mul_424 = int_390 * mul_395;
mul_425 = history_53 * 0.999;
mul_426 = mul_424 * 0.001;
add_427 = mul_426 + mul_425;
gen_428 = add_427;
history_53_next_429 = fixdenorm(add_427);
gen_430 = gen_428;
mul_431 = int_391 * mul_395;
mul_432 = history_54 * 0.999;
mul_433 = mul_431 * 0.001;
add_434 = mul_433 + mul_432;
gen_435 = add_434;
history_54_next_436 = fixdenorm(add_434);
gen_437 = gen_435;
mul_438 = int_392 * mul_395;
mul_439 = history_55 * 0.999;
mul_440 = mul_438 * 0.001;
add_441 = mul_440 + mul_439;
gen_442 = add_441;
history_55_next_443 = fixdenorm(add_441);
gen_444 = gen_442;
mul_445 = int_393 * mul_395;
mul_446 = history_56 * 0.999;
mul_447 = mul_445 * 0.001;
add_448 = mul_447 + mul_446;
gen_449 = add_448;
history_56_next_450 = fixdenorm(add_448);
gen_451 = gen_449;
rsub_452 = 1. - rsub_385;
mul_453 = history_58 * rsub_452;
add_454 = zeroL_304 + gen_423;
tap_455 = delay_57.read(add_454, interp="linear");
mul_456 = tap_455 * rsub_385;
add_457 = mul_456 + mul_453;
mul_458 = add_457 * gen_289;
add_459 = fromFILTERS_c45L_384 + mul_458;
gen_460 = add_459;
history_58_next_461 = fixdenorm(add_457);
rsub_462 = 1. - rsub_385;
mul_463 = history_60 * rsub_462;
add_464 = zeroL_304 + gen_416;
tap_465 = delay_59.read(add_464, interp="linear");
mul_466 = tap_465 * rsub_385;
add_467 = mul_466 + mul_463;
mul_468 = add_467 * gen_289;
add_469 = fromFILTERS_c45L_384 + mul_468;
gen_470 = add_469;
history_60_next_471 = fixdenorm(add_467);
rsub_472 = 1. - rsub_385;
mul_473 = history_62 * rsub_472;
add_474 = zeroL_304 + gen_437;
tap_475 = delay_61.read(add_474, interp="linear");
mul_476 = tap_475 * rsub_385;
add_477 = mul_476 + mul_473;
mul_478 = add_477 * gen_289;
add_479 = fromFILTERS_c45L_384 + mul_478;
gen_480 = add_479;
history_62_next_481 = fixdenorm(add_477);
rsub_482 = 1. - rsub_385;
mul_483 = history_64 * rsub_482;
add_484 = zeroL_304 + gen_451;
tap_485 = delay_63.read(add_484, interp="linear");
mul_486 = tap_485 * rsub_385;
add_487 = mul_486 + mul_483;
mul_488 = add_487 * gen_289;
add_489 = fromFILTERS_c45L_384 + mul_488;
gen_490 = add_489;
history_64_next_491 = fixdenorm(add_487);
rsub_492 = 1. - rsub_385;
mul_493 = history_66 * rsub_492;
add_494 = zeroL_304 + gen_444;
tap_495 = delay_65.read(add_494, interp="linear");
mul_496 = tap_495 * rsub_385;
add_497 = mul_496 + mul_493;
mul_498 = add_497 * gen_289;
add_499 = fromFILTERS_c45L_384 + mul_498;
gen_500 = add_499;
history_66_next_501 = fixdenorm(add_497);
rsub_502 = 1. - rsub_385;
mul_503 = history_68 * rsub_502;
add_504 = zeroL_304 + gen_402;
tap_505 = delay_67.read(add_504, interp="linear");
mul_506 = tap_505 * rsub_385;
add_507 = mul_506 + mul_503;
mul_508 = add_507 * gen_289;
add_509 = fromFILTERS_c45L_384 + mul_508;
gen_510 = add_509;
history_68_next_511 = fixdenorm(add_507);
rsub_512 = 1. - rsub_385;
mul_513 = history_70 * rsub_512;
add_514 = zeroL_304 + gen_409;
tap_515 = delay_69.read(add_514, interp="linear");
mul_516 = tap_515 * rsub_385;
add_517 = mul_516 + mul_513;
mul_518 = add_517 * gen_289;
add_519 = fromFILTERS_c45L_384 + mul_518;
gen_520 = add_519;
history_70_next_521 = fixdenorm(add_517);
rsub_522 = 1. - rsub_385;
mul_523 = history_72 * rsub_522;
add_524 = zeroL_304 + gen_430;
tap_525 = delay_71.read(add_524, interp="linear");
mul_526 = tap_525 * rsub_385;
add_527 = mul_526 + mul_523;
mul_528 = add_527 * gen_289;
add_529 = fromFILTERS_c45L_384 + mul_528;
gen_530 = add_529;
history_72_next_531 = fixdenorm(add_527);
mul_532 = ((((((((((((((gen_530 + gen_520)) + gen_510)) + gen_500)) + gen_490)) + gen_480)) + gen_470)) + gen_460)) * 0.125;
gen_533 = mul_532;
mul_534 = float_252 * -1;
mul_535 = gen_533 * mul_534;
int_536 = int(255);
div_537 = SAMPLERATE / 44100;
mul_538 = div_537 * escala_Size_264;
mul_539 = int_536 * mul_538;
add_540 = int_251 + mul_539;
tap_541 = delay_73.read(add_540, interp="linear");
tap_542 = delay_74.read(add_540, interp="linear");
mul_543 = tap_542 * float_252;
add_544 = mul_535 + ((tap_541 + mul_543));
gen_545 = add_544;
mul_546 = float_252 * -1;
mul_547 = gen_545 * mul_546;
int_548 = int(556);
div_549 = SAMPLERATE / 44100;
mul_550 = div_549 * escala_Size_264;
mul_551 = int_548 * mul_550;
add_552 = int_251 + mul_551;
tap_553 = delay_75.read(add_552, interp="linear");
tap_554 = delay_76.read(add_552, interp="linear");
mul_555 = tap_554 * float_252;
add_556 = mul_547 + ((tap_553 + mul_555));
gen_557 = add_556;
mul_558 = float_252 * -1;
mul_559 = gen_557 * mul_558;
int_560 = int(441);
div_561 = SAMPLERATE / 44100;
mul_562 = div_561 * escala_Size_264;
mul_563 = int_560 * mul_562;
add_564 = int_251 + mul_563;
tap_565 = delay_77.read(add_564, interp="linear");
tap_566 = delay_78.read(add_564, interp="linear");
mul_567 = tap_566 * float_252;
add_568 = mul_559 + ((tap_565 + mul_567));
gen_569 = add_568;
mul_570 = float_252 * -1;
mul_571 = gen_569 * mul_570;
int_572 = int(341);
div_573 = SAMPLERATE / 44100;
mul_574 = div_573 * escala_Size_264;
mul_575 = int_572 * mul_574;
add_576 = int_251 + mul_575;
tap_577 = delay_79.read(add_576, interp="linear");
tap_578 = delay_80.read(add_576, interp="linear");
mul_579 = tap_578 * float_252;
add_580 = mul_571 + ((tap_577 + mul_579));
gen_581 = add_580;
gen_582 = gen_581;
matrizMS_c45L_583 = gen_582;
fromFILTERS_c45R_584 = gen_382;
rsub_585 = 1 - damp_257;
int_586 = int(1422);
int_587 = int(1491);
int_588 = int(1116);
int_589 = int(1188);
int_590 = int(1617);
int_591 = int(1356);
int_592 = int(1277);
int_593 = int(1557);
div_594 = SAMPLERATE / 44100;
mul_595 = div_594 * escala_Size_263;
mul_596 = int_586 * mul_595;
mul_597 = history_81 * 0.999;
mul_598 = mul_596 * 0.001;
add_599 = mul_598 + mul_597;
gen_600 = add_599;
history_81_next_601 = fixdenorm(add_599);
gen_602 = gen_600;
mul_603 = int_587 * mul_595;
mul_604 = history_82 * 0.999;
mul_605 = mul_603 * 0.001;
add_606 = mul_605 + mul_604;
gen_607 = add_606;
history_82_next_608 = fixdenorm(add_606);
gen_609 = gen_607;
mul_610 = int_588 * mul_595;
mul_611 = history_83 * 0.999;
mul_612 = mul_610 * 0.001;
add_613 = mul_612 + mul_611;
gen_614 = add_613;
history_83_next_615 = fixdenorm(add_613);
gen_616 = gen_614;
mul_617 = int_589 * mul_595;
mul_618 = history_84 * 0.999;
mul_619 = mul_617 * 0.001;
add_620 = mul_619 + mul_618;
gen_621 = add_620;
history_84_next_622 = fixdenorm(add_620);
gen_623 = gen_621;
mul_624 = int_590 * mul_595;
mul_625 = history_85 * 0.999;
mul_626 = mul_624 * 0.001;
add_627 = mul_626 + mul_625;
gen_628 = add_627;
history_85_next_629 = fixdenorm(add_627);
gen_630 = gen_628;
mul_631 = int_591 * mul_595;
mul_632 = history_86 * 0.999;
mul_633 = mul_631 * 0.001;
add_634 = mul_633 + mul_632;
gen_635 = add_634;
history_86_next_636 = fixdenorm(add_634);
gen_637 = gen_635;
mul_638 = int_592 * mul_595;
mul_639 = history_87 * 0.999;
mul_640 = mul_638 * 0.001;
add_641 = mul_640 + mul_639;
gen_642 = add_641;
history_87_next_643 = fixdenorm(add_641);
gen_644 = gen_642;
mul_645 = int_593 * mul_595;
mul_646 = history_88 * 0.999;
mul_647 = mul_645 * 0.001;
add_648 = mul_647 + mul_646;
gen_649 = add_648;
history_88_next_650 = fixdenorm(add_648);
gen_651 = gen_649;
rsub_652 = 1. - rsub_585;
mul_653 = history_90 * rsub_652;
add_654 = zeroR_306 + gen_616;
tap_655 = delay_89.read(add_654, interp="linear");
mul_656 = tap_655 * rsub_585;
add_657 = mul_656 + mul_653;
mul_658 = add_657 * gen_289;
add_659 = fromFILTERS_c45R_584 + mul_658;
gen_660 = add_659;
history_90_next_661 = fixdenorm(add_657);
rsub_662 = 1. - rsub_585;
mul_663 = history_92 * rsub_662;
add_664 = zeroR_306 + gen_623;
tap_665 = delay_91.read(add_664, interp="linear");
mul_666 = tap_665 * rsub_585;
add_667 = mul_666 + mul_663;
mul_668 = add_667 * gen_289;
add_669 = fromFILTERS_c45R_584 + mul_668;
gen_670 = add_669;
history_92_next_671 = fixdenorm(add_667);
rsub_672 = 1. - rsub_585;
mul_673 = history_94 * rsub_672;
add_674 = zeroR_306 + gen_637;
tap_675 = delay_93.read(add_674, interp="linear");
mul_676 = tap_675 * rsub_585;
add_677 = mul_676 + mul_673;
mul_678 = add_677 * gen_289;
add_679 = fromFILTERS_c45R_584 + mul_678;
gen_680 = add_679;
history_94_next_681 = fixdenorm(add_677);
rsub_682 = 1. - rsub_585;
mul_683 = history_96 * rsub_682;
add_684 = zeroR_306 + gen_644;
tap_685 = delay_95.read(add_684, interp="linear");
mul_686 = tap_685 * rsub_585;
add_687 = mul_686 + mul_683;
mul_688 = add_687 * gen_289;
add_689 = fromFILTERS_c45R_584 + mul_688;
gen_690 = add_689;
history_96_next_691 = fixdenorm(add_687);
rsub_692 = 1. - rsub_585;
mul_693 = history_98 * rsub_692;
add_694 = zeroR_306 + gen_602;
tap_695 = delay_97.read(add_694, interp="linear");
mul_696 = tap_695 * rsub_585;
add_697 = mul_696 + mul_693;
mul_698 = add_697 * gen_289;
add_699 = fromFILTERS_c45R_584 + mul_698;
gen_700 = add_699;
history_98_next_701 = fixdenorm(add_697);
rsub_702 = 1. - rsub_585;
mul_703 = history_100 * rsub_702;
add_704 = zeroR_306 + gen_609;
tap_705 = delay_99.read(add_704, interp="linear");
mul_706 = tap_705 * rsub_585;
add_707 = mul_706 + mul_703;
mul_708 = add_707 * gen_289;
add_709 = fromFILTERS_c45R_584 + mul_708;
gen_710 = add_709;
history_100_next_711 = fixdenorm(add_707);
rsub_712 = 1. - rsub_585;
mul_713 = history_102 * rsub_712;
add_714 = zeroR_306 + gen_630;
tap_715 = delay_101.read(add_714, interp="linear");
mul_716 = tap_715 * rsub_585;
add_717 = mul_716 + mul_713;
mul_718 = add_717 * gen_289;
add_719 = fromFILTERS_c45R_584 + mul_718;
gen_720 = add_719;
history_102_next_721 = fixdenorm(add_717);
rsub_722 = 1. - rsub_585;
mul_723 = history_104 * rsub_722;
add_724 = zeroR_306 + gen_651;
tap_725 = delay_103.read(add_724, interp="linear");
mul_726 = tap_725 * rsub_585;
add_727 = mul_726 + mul_723;
mul_728 = add_727 * gen_289;
add_729 = fromFILTERS_c45R_584 + mul_728;
gen_730 = add_729;
history_104_next_731 = fixdenorm(add_727);
mul_732 = ((((((((((((((gen_730 + gen_720)) + gen_710)) + gen_700)) + gen_690)) + gen_680)) + gen_670)) + gen_660)) * 0.125;
gen_733 = mul_732;
mul_734 = float_254 * -1;
mul_735 = gen_733 * mul_734;
int_736 = int(255);
div_737 = SAMPLERATE / 44100;
mul_738 = div_737 * escala_Size_265;
mul_739 = int_736 * mul_738;
add_740 = int_253 + mul_739;
tap_741 = delay_105.read(add_740, interp="linear");
tap_742 = delay_106.read(add_740, interp="linear");
mul_743 = tap_742 * float_254;
add_744 = mul_735 + ((tap_741 + mul_743));
gen_745 = add_744;
mul_746 = float_254 * -1;
mul_747 = gen_745 * mul_746;
int_748 = int(556);
div_749 = SAMPLERATE / 44100;
mul_750 = div_749 * escala_Size_265;
mul_751 = int_748 * mul_750;
add_752 = int_253 + mul_751;
tap_753 = delay_107.read(add_752, interp="linear");
tap_754 = delay_108.read(add_752, interp="linear");
mul_755 = tap_754 * float_254;
add_756 = mul_747 + ((tap_753 + mul_755));
gen_757 = add_756;
mul_758 = float_254 * -1;
mul_759 = gen_757 * mul_758;
int_760 = int(441);
div_761 = SAMPLERATE / 44100;
mul_762 = div_761 * escala_Size_265;
mul_763 = int_760 * mul_762;
add_764 = int_253 + mul_763;
tap_765 = delay_109.read(add_764, interp="linear");
tap_766 = delay_110.read(add_764, interp="linear");
mul_767 = tap_766 * float_254;
add_768 = mul_759 + ((tap_765 + mul_767));
gen_769 = add_768;
mul_770 = float_254 * -1;
mul_771 = gen_769 * mul_770;
int_772 = int(341);
div_773 = SAMPLERATE / 44100;
mul_774 = div_773 * escala_Size_265;
mul_775 = int_772 * mul_774;
add_776 = int_253 + mul_775;
tap_777 = delay_111.read(add_776, interp="linear");
tap_778 = delay_112.read(add_776, interp="linear");
mul_779 = tap_778 * float_254;
add_780 = mul_771 + ((tap_777 + mul_779));
gen_781 = add_780;
gen_782 = gen_781;
matrizMS_c45R_783 = gen_782;
add_784 = matrizMS_c45L_583 + matrizMS_c45R_783;
mul_785 = add_784 * sqrt_250;
sub_786 = matrizMS_c45L_583 - matrizMS_c45R_783;
mul_787 = sub_786 * sqrt_248;
add_788 = mul_785 + mul_787;
mul_789 = add_788 * scale_194;
filterL_790 = mul_789;
sub_791 = mul_785 - mul_787;
mul_792 = sub_791 * scale_194;
filterR_793 = mul_792;
expr_794, expr_795 = eq3bandas(filterL_790, filterR_793, gen_198, gen_203, gen_208, gen_213, gen_218, gen_223, 1);
gen_796 = expr_794;
gen_797 = expr_795;
fromFilterL_798 = gen_796;
mix_799 = mix(mul_789, fromFilterL_798, onOffEQ_180);
fromFilterR_800 = gen_797;
mix_801 = mix(mul_792, fromFilterR_800, onOffEQ_180);
dbtoa_802 = dbtoa(mkC_159);
mstosamps_803 = mstosamps(relC_153);
mstosamps_804 = mstosamps(atkC_147);
int_805 = int(300);
tap_806 = delay_113.read(int_805);
mul_807 = mix_801 * mix_801;
add_808 = history_114 + mul_807;
sub_809 = add_808 - tap_806;
div_810 = sub_809 / int_805;
sqrt_811 = sqrt(div_810);
gen_812 = sqrt_811;
history_114_next_813 = fixdenorm(sub_809);
atodb_814 = atodb(gen_812);
max_815 = max(atodb_814, -96);
gt_816 = max_815 > thdC_135;
mul_817 = history_115 * 0.999;
mul_818 = gt_816 * 0.001;
add_819 = mul_818 + mul_817;
gen_820 = add_819;
history_115_next_821 = fixdenorm(add_819);
sub_822 = thdC_135 - max_815;
rdiv_823 = 1 / ratioC_141;
rsub_824 = 1 - rdiv_823;
mul_825 = sub_822 * rsub_824;
dbtoa_826 = dbtoa(mul_825);
scale_827 = scale(gen_820, 0, 1, 1, dbtoa_826, 1);
slide_828 = slide(scale_827, mstosamps_803, mstosamps_804);
mul_829 = mix_801 * slide_828;
mul_830 = mul_829 * dbtoa_802;
gen_831 = mul_830;
int_832 = int(300);
tap_833 = delay_116.read(int_832);
mul_834 = mix_799 * mix_799;
add_835 = history_117 + mul_834;
sub_836 = add_835 - tap_833;
div_837 = sub_836 / int_832;
sqrt_838 = sqrt(div_837);
gen_839 = sqrt_838;
history_117_next_840 = fixdenorm(sub_836);
atodb_841 = atodb(gen_839);
max_842 = max(atodb_841, -96);
gt_843 = max_842 > thdC_135;
mul_844 = history_118 * 0.999;
mul_845 = gt_843 * 0.001;
add_846 = mul_845 + mul_844;
gen_847 = add_846;
history_118_next_848 = fixdenorm(add_846);
sub_849 = thdC_135 - max_842;
mul_850 = sub_849 * rsub_824;
dbtoa_851 = dbtoa(mul_850);
scale_852 = scale(gen_847, 0, 1, 1, dbtoa_851, 1);
slide_853 = slide(scale_852, mstosamps_803, mstosamps_804);
mul_854 = mix_799 * slide_853;
mul_855 = mul_854 * dbtoa_802;
gen_856 = mul_855;
mix_857 = mix(mix_799, gen_856, onC_129);
gen_858 = mix_857;
mix_859 = mix(mix_801, gen_831, onC_129);
gen_860 = mix_859;
mix_861 = mix(mix_234, gen_858, gen_169);
mul_862 = mix_861 * gen_122;
dcblock_863 = dcblock(mul_862);
out1 = dcblock_863;
mix_864 = mix(mix_247, gen_860, gen_169);
mul_865 = mix_864 * gen_122;
dcblock_866 = dcblock(mul_865);
out2 = dcblock_866;
history_7 = history_7_next_123;
history_118 = history_118_next_848;
history_117 = history_117_next_840;
delay_116.write(mul_834);
history_115 = history_115_next_821;
history_114 = history_114_next_813;
delay_113.write(mul_807);
delay_106.write(add_744);
delay_107.write(gen_745);
delay_108.write(add_756);
delay_109.write(gen_757);
delay_110.write(add_768);
delay_111.write(gen_769);
delay_112.write(add_780);
delay_105.write(gen_733);
history_88 = history_88_next_650;
history_87 = history_87_next_643;
history_86 = history_86_next_636;
history_85 = history_85_next_629;
history_84 = history_84_next_622;
history_83 = history_83_next_615;
history_82 = history_82_next_608;
delay_89.write(add_659);
history_90 = history_90_next_661;
delay_91.write(add_669);
history_92 = history_92_next_671;
delay_93.write(add_679);
history_94 = history_94_next_681;
delay_95.write(add_689);
history_96 = history_96_next_691;
delay_97.write(add_699);
history_98 = history_98_next_701;
delay_99.write(add_709);
history_100 = history_100_next_711;
delay_101.write(add_719);
history_102 = history_102_next_721;
delay_103.write(add_729);
history_104 = history_104_next_731;
history_81 = history_81_next_601;
delay_74.write(add_544);
delay_75.write(gen_545);
delay_76.write(add_556);
delay_77.write(gen_557);
delay_78.write(add_568);
delay_79.write(gen_569);
delay_80.write(add_580);
delay_73.write(gen_533);
history_56 = history_56_next_450;
history_55 = history_55_next_443;
history_54 = history_54_next_436;
history_53 = history_53_next_429;
history_52 = history_52_next_422;
history_51 = history_51_next_415;
history_50 = history_50_next_408;
delay_57.write(add_459);
history_58 = history_58_next_461;
delay_59.write(add_469);
history_60 = history_60_next_471;
delay_61.write(add_479);
history_62 = history_62_next_481;
delay_63.write(add_489);
history_64 = history_64_next_491;
delay_65.write(add_499);
history_66 = history_66_next_501;
delay_67.write(add_509);
history_68 = history_68_next_511;
delay_69.write(add_519);
history_70 = history_70_next_521;
delay_71.write(add_529);
history_72 = history_72_next_531;
history_49 = history_49_next_401;
history_40 = history_40_next_359;
history_39 = history_39_next_358;
history_38 = history_38_next_357;
history_37 = history_37_next_356;
history_36 = history_36_next_355;
history_35 = history_35_next_354;
history_34 = history_34_next_353;
history_41 = history_41_next_374;
history_48 = history_48_next_381;
history_47 = history_47_next_380;
history_46 = history_46_next_379;
history_45 = history_45_next_378;
history_44 = history_44_next_377;
history_43 = history_43_next_376;
history_42 = history_42_next_375;
history_33 = history_33_next_352;
history_32 = history_32_next_312;
history_31 = history_31_next_301;
history_30 = history_30_next_290;
history_29 = history_29_next_276;
history_28 = history_28_next_271;
history_27 = history_27_next_262;
history_26 = history_26_next_245;
history_25 = history_25_next_229;
history_24 = history_24_next_224;
history_23 = history_23_next_219;
history_22 = history_22_next_214;
history_21 = history_21_next_209;
history_20 = history_20_next_204;
history_19 = history_19_next_199;
history_18 = history_18_next_193;
history_17 = history_17_next_188;
history_16 = history_16_next_179;
history_15 = history_15_next_170;
history_14 = history_14_next_164;
history_13 = history_13_next_158;
history_12 = history_12_next_152;
history_11 = history_11_next_146;
history_10 = history_10_next_140;
history_9 = history_9_next_134;
history_8 = history_8_next_128;